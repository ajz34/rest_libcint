use rest_libcint::CINTR2CDATA;
use rest_libcint::cint_wrapper::*;
use ndarray::prelude::*;
use approx::*;

#[cfg(test)]
mod test_c15_tzvp {
    use super::*;

    #[test]
    fn test_int3c2e_s1_full() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let out = cint_data.integral_s1::<int3c2e>(None);
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), 481358.8444863676, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), 127300.77647158667, max_relative=1e-10);
    }

    #[test]
    fn test_int3c2e_s1_slice() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let shl_slices = vec![[7, 275], [12, 129], [5, 264]];
        let out = cint_data.integral_s1::<int3c2e>(Some(&shl_slices));
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), 213342.8408809482, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), 55811.71336929558, max_relative=1e-10);
    }

    #[test]
    fn test_int3c2e_ip1_s1_slice() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let shl_slices = vec![[7, 275], [12, 129], [5, 264]];
        let out = cint_data.integral_s1::<int3c2e_ip1>(Some(&shl_slices));
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), -10007.110461088905, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), 1698.1730005702707, max_relative=1e-10);
    }

    #[test]
    fn test_int2c2e_ip1_s1_slice() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let shl_slices = vec![[7, 275], [5, 264]];
        let out = cint_data.integral_s1::<int2c2e_ip1>(Some(&shl_slices));
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), -693.0183096938822, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), 1960.186871018245, max_relative=1e-10);
    }

    #[test]
    fn test_int2e_ip1ip2_s1_slice() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let shl_slices = vec![[7, 30], [5, 52], [58, 89], [125, 156]];
        let out = cint_data.integral_s1::<int2e_ip1ip2>(Some(&shl_slices));
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), 0.06946888260914107, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), -0.021085092464779066, max_relative=1e-10);
    }

    #[test]
    fn test_int3c2e_s2ij_full() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let out = cint_data.integral_s2ij::<int3c2e>(None);
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        assert_relative_eq!(
            out.sum(), 311401.69988397433, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), 84387.58117014868, max_relative=1e-10);
    }

    #[test]
    fn test_int3c2e_ip2_s2ij_slice() {

        use std::time::Instant;

        let mut cint_data = initialize();
        let now = Instant::now();
        let shl_slices = vec![[0, 275], [0, 275], [7, 264]];
        let out = cint_data.integral_s2ij::<int3c2e_ip2>(Some(&shl_slices));
        let elapsed = now.elapsed();
        println!("Elapsed: {:.3?}", elapsed);

        let scale = Array::linspace(-1., 1., out.len());
        let out = Array::from_vec(out);
        println!("{:?}", out);
        assert_relative_eq!(
            out.sum(), 10545.286228548592, max_relative=1e-10);
        assert_relative_eq!(
            (out * scale).sum(), -1645.065493306819, max_relative=1e-10);
    }

    fn initialize() -> CINTR2CDATA {
        // mol = gto.Mole(atom="O; H 1 0.94; H 1 0.94 2 104.5", basis="6-31G").build()
        let c_atm = vec![
            vec![  6,  20,   1,  23,   0,   0],
            vec![  6,  24,   1,  27,   0,   0],
            vec![  6,  28,   1,  31,   0,   0],
            vec![  6,  32,   1,  35,   0,   0],
            vec![  6,  36,   1,  39,   0,   0],
            vec![  6,  40,   1,  43,   0,   0],
            vec![  6,  44,   1,  47,   0,   0],
            vec![  6,  48,   1,  51,   0,   0],
            vec![  6,  52,   1,  55,   0,   0],
            vec![  6,  56,   1,  59,   0,   0],
            vec![  6,  60,   1,  63,   0,   0],
            vec![  6,  64,   1,  67,   0,   0],
            vec![  6,  68,   1,  71,   0,   0],
            vec![  6,  72,   1,  75,   0,   0],
            vec![  6,  76,   1,  79,   0,   0],
            vec![  1,  80,   1,  83,   0,   0],
            vec![  1,  84,   1,  87,   0,   0],
            vec![  1,  88,   1,  91,   0,   0],
            vec![  1,  92,   1,  95,   0,   0],
            vec![  1,  96,   1,  99,   0,   0],
            vec![  1, 100,   1, 103,   0,   0],
            vec![  1, 104,   1, 107,   0,   0],
            vec![  1, 108,   1, 111,   0,   0],
            vec![  1, 112,   1, 115,   0,   0],
            vec![  1, 116,   1, 119,   0,   0],
            vec![  1, 120,   1, 123,   0,   0],
            vec![  1, 124,   1, 127,   0,   0],
            vec![  1, 128,   1, 131,   0,   0],
            vec![  1, 132,   1, 135,   0,   0],
            vec![  1, 136,   1, 139,   0,   0],
            vec![  1, 140,   1, 143,   0,   0],
            vec![  1, 144,   1, 147,   0,   0],
            vec![  1, 148,   1, 151,   0,   0],
            vec![  1, 152,   1, 155,   0,   0],
            vec![  1, 156,   1, 159,   0,   0],
            vec![  1, 160,   1, 163,   0,   0],
            vec![  1, 164,   1, 167,   0,   0],
            vec![  1, 168,   1, 171,   0,   0],
            vec![  1, 172,   1, 175,   0,   0],
            vec![  1, 176,   1, 179,   0,   0],
            vec![  1, 180,   1, 183,   0,   0],
            vec![  1, 184,   1, 187,   0,   0],
            vec![  1, 188,   1, 191,   0,   0],
            vec![  1, 192,   1, 195,   0,   0],
            vec![  1, 196,   1, 199,   0,   0],
            vec![  1, 200,   1, 203,   0,   0],
            vec![  1, 204,   1, 207,   0,   0],
        ];
        let c_bas = vec![
            vec![  0,   0,   6,   1,   0, 220, 226,   0],
            vec![  0,   0,   2,   1,   0, 232, 234,   0],
            vec![  0,   0,   1,   1,   0, 236, 237,   0],
            vec![  0,   0,   1,   1,   0, 238, 239,   0],
            vec![  0,   0,   1,   1,   0, 240, 241,   0],
            vec![  0,   1,   4,   1,   0, 242, 246,   0],
            vec![  0,   1,   1,   1,   0, 250, 251,   0],
            vec![  0,   1,   1,   1,   0, 252, 253,   0],
            vec![  0,   2,   1,   1,   0, 254, 255,   0],
            vec![  0,   2,   1,   1,   0, 256, 257,   0],
            vec![  0,   3,   1,   1,   0, 258, 259,   0],
            vec![  1,   0,   6,   1,   0, 220, 226,   0],
            vec![  1,   0,   2,   1,   0, 232, 234,   0],
            vec![  1,   0,   1,   1,   0, 236, 237,   0],
            vec![  1,   0,   1,   1,   0, 238, 239,   0],
            vec![  1,   0,   1,   1,   0, 240, 241,   0],
            vec![  1,   1,   4,   1,   0, 242, 246,   0],
            vec![  1,   1,   1,   1,   0, 250, 251,   0],
            vec![  1,   1,   1,   1,   0, 252, 253,   0],
            vec![  1,   2,   1,   1,   0, 254, 255,   0],
            vec![  1,   2,   1,   1,   0, 256, 257,   0],
            vec![  1,   3,   1,   1,   0, 258, 259,   0],
            vec![  2,   0,   6,   1,   0, 220, 226,   0],
            vec![  2,   0,   2,   1,   0, 232, 234,   0],
            vec![  2,   0,   1,   1,   0, 236, 237,   0],
            vec![  2,   0,   1,   1,   0, 238, 239,   0],
            vec![  2,   0,   1,   1,   0, 240, 241,   0],
            vec![  2,   1,   4,   1,   0, 242, 246,   0],
            vec![  2,   1,   1,   1,   0, 250, 251,   0],
            vec![  2,   1,   1,   1,   0, 252, 253,   0],
            vec![  2,   2,   1,   1,   0, 254, 255,   0],
            vec![  2,   2,   1,   1,   0, 256, 257,   0],
            vec![  2,   3,   1,   1,   0, 258, 259,   0],
            vec![  3,   0,   6,   1,   0, 220, 226,   0],
            vec![  3,   0,   2,   1,   0, 232, 234,   0],
            vec![  3,   0,   1,   1,   0, 236, 237,   0],
            vec![  3,   0,   1,   1,   0, 238, 239,   0],
            vec![  3,   0,   1,   1,   0, 240, 241,   0],
            vec![  3,   1,   4,   1,   0, 242, 246,   0],
            vec![  3,   1,   1,   1,   0, 250, 251,   0],
            vec![  3,   1,   1,   1,   0, 252, 253,   0],
            vec![  3,   2,   1,   1,   0, 254, 255,   0],
            vec![  3,   2,   1,   1,   0, 256, 257,   0],
            vec![  3,   3,   1,   1,   0, 258, 259,   0],
            vec![  4,   0,   6,   1,   0, 220, 226,   0],
            vec![  4,   0,   2,   1,   0, 232, 234,   0],
            vec![  4,   0,   1,   1,   0, 236, 237,   0],
            vec![  4,   0,   1,   1,   0, 238, 239,   0],
            vec![  4,   0,   1,   1,   0, 240, 241,   0],
            vec![  4,   1,   4,   1,   0, 242, 246,   0],
            vec![  4,   1,   1,   1,   0, 250, 251,   0],
            vec![  4,   1,   1,   1,   0, 252, 253,   0],
            vec![  4,   2,   1,   1,   0, 254, 255,   0],
            vec![  4,   2,   1,   1,   0, 256, 257,   0],
            vec![  4,   3,   1,   1,   0, 258, 259,   0],
            vec![  5,   0,   6,   1,   0, 220, 226,   0],
            vec![  5,   0,   2,   1,   0, 232, 234,   0],
            vec![  5,   0,   1,   1,   0, 236, 237,   0],
            vec![  5,   0,   1,   1,   0, 238, 239,   0],
            vec![  5,   0,   1,   1,   0, 240, 241,   0],
            vec![  5,   1,   4,   1,   0, 242, 246,   0],
            vec![  5,   1,   1,   1,   0, 250, 251,   0],
            vec![  5,   1,   1,   1,   0, 252, 253,   0],
            vec![  5,   2,   1,   1,   0, 254, 255,   0],
            vec![  5,   2,   1,   1,   0, 256, 257,   0],
            vec![  5,   3,   1,   1,   0, 258, 259,   0],
            vec![  6,   0,   6,   1,   0, 220, 226,   0],
            vec![  6,   0,   2,   1,   0, 232, 234,   0],
            vec![  6,   0,   1,   1,   0, 236, 237,   0],
            vec![  6,   0,   1,   1,   0, 238, 239,   0],
            vec![  6,   0,   1,   1,   0, 240, 241,   0],
            vec![  6,   1,   4,   1,   0, 242, 246,   0],
            vec![  6,   1,   1,   1,   0, 250, 251,   0],
            vec![  6,   1,   1,   1,   0, 252, 253,   0],
            vec![  6,   2,   1,   1,   0, 254, 255,   0],
            vec![  6,   2,   1,   1,   0, 256, 257,   0],
            vec![  6,   3,   1,   1,   0, 258, 259,   0],
            vec![  7,   0,   6,   1,   0, 220, 226,   0],
            vec![  7,   0,   2,   1,   0, 232, 234,   0],
            vec![  7,   0,   1,   1,   0, 236, 237,   0],
            vec![  7,   0,   1,   1,   0, 238, 239,   0],
            vec![  7,   0,   1,   1,   0, 240, 241,   0],
            vec![  7,   1,   4,   1,   0, 242, 246,   0],
            vec![  7,   1,   1,   1,   0, 250, 251,   0],
            vec![  7,   1,   1,   1,   0, 252, 253,   0],
            vec![  7,   2,   1,   1,   0, 254, 255,   0],
            vec![  7,   2,   1,   1,   0, 256, 257,   0],
            vec![  7,   3,   1,   1,   0, 258, 259,   0],
            vec![  8,   0,   6,   1,   0, 220, 226,   0],
            vec![  8,   0,   2,   1,   0, 232, 234,   0],
            vec![  8,   0,   1,   1,   0, 236, 237,   0],
            vec![  8,   0,   1,   1,   0, 238, 239,   0],
            vec![  8,   0,   1,   1,   0, 240, 241,   0],
            vec![  8,   1,   4,   1,   0, 242, 246,   0],
            vec![  8,   1,   1,   1,   0, 250, 251,   0],
            vec![  8,   1,   1,   1,   0, 252, 253,   0],
            vec![  8,   2,   1,   1,   0, 254, 255,   0],
            vec![  8,   2,   1,   1,   0, 256, 257,   0],
            vec![  8,   3,   1,   1,   0, 258, 259,   0],
            vec![  9,   0,   6,   1,   0, 220, 226,   0],
            vec![  9,   0,   2,   1,   0, 232, 234,   0],
            vec![  9,   0,   1,   1,   0, 236, 237,   0],
            vec![  9,   0,   1,   1,   0, 238, 239,   0],
            vec![  9,   0,   1,   1,   0, 240, 241,   0],
            vec![  9,   1,   4,   1,   0, 242, 246,   0],
            vec![  9,   1,   1,   1,   0, 250, 251,   0],
            vec![  9,   1,   1,   1,   0, 252, 253,   0],
            vec![  9,   2,   1,   1,   0, 254, 255,   0],
            vec![  9,   2,   1,   1,   0, 256, 257,   0],
            vec![  9,   3,   1,   1,   0, 258, 259,   0],
            vec![ 10,   0,   6,   1,   0, 220, 226,   0],
            vec![ 10,   0,   2,   1,   0, 232, 234,   0],
            vec![ 10,   0,   1,   1,   0, 236, 237,   0],
            vec![ 10,   0,   1,   1,   0, 238, 239,   0],
            vec![ 10,   0,   1,   1,   0, 240, 241,   0],
            vec![ 10,   1,   4,   1,   0, 242, 246,   0],
            vec![ 10,   1,   1,   1,   0, 250, 251,   0],
            vec![ 10,   1,   1,   1,   0, 252, 253,   0],
            vec![ 10,   2,   1,   1,   0, 254, 255,   0],
            vec![ 10,   2,   1,   1,   0, 256, 257,   0],
            vec![ 10,   3,   1,   1,   0, 258, 259,   0],
            vec![ 11,   0,   6,   1,   0, 220, 226,   0],
            vec![ 11,   0,   2,   1,   0, 232, 234,   0],
            vec![ 11,   0,   1,   1,   0, 236, 237,   0],
            vec![ 11,   0,   1,   1,   0, 238, 239,   0],
            vec![ 11,   0,   1,   1,   0, 240, 241,   0],
            vec![ 11,   1,   4,   1,   0, 242, 246,   0],
            vec![ 11,   1,   1,   1,   0, 250, 251,   0],
            vec![ 11,   1,   1,   1,   0, 252, 253,   0],
            vec![ 11,   2,   1,   1,   0, 254, 255,   0],
            vec![ 11,   2,   1,   1,   0, 256, 257,   0],
            vec![ 11,   3,   1,   1,   0, 258, 259,   0],
            vec![ 12,   0,   6,   1,   0, 220, 226,   0],
            vec![ 12,   0,   2,   1,   0, 232, 234,   0],
            vec![ 12,   0,   1,   1,   0, 236, 237,   0],
            vec![ 12,   0,   1,   1,   0, 238, 239,   0],
            vec![ 12,   0,   1,   1,   0, 240, 241,   0],
            vec![ 12,   1,   4,   1,   0, 242, 246,   0],
            vec![ 12,   1,   1,   1,   0, 250, 251,   0],
            vec![ 12,   1,   1,   1,   0, 252, 253,   0],
            vec![ 12,   2,   1,   1,   0, 254, 255,   0],
            vec![ 12,   2,   1,   1,   0, 256, 257,   0],
            vec![ 12,   3,   1,   1,   0, 258, 259,   0],
            vec![ 13,   0,   6,   1,   0, 220, 226,   0],
            vec![ 13,   0,   2,   1,   0, 232, 234,   0],
            vec![ 13,   0,   1,   1,   0, 236, 237,   0],
            vec![ 13,   0,   1,   1,   0, 238, 239,   0],
            vec![ 13,   0,   1,   1,   0, 240, 241,   0],
            vec![ 13,   1,   4,   1,   0, 242, 246,   0],
            vec![ 13,   1,   1,   1,   0, 250, 251,   0],
            vec![ 13,   1,   1,   1,   0, 252, 253,   0],
            vec![ 13,   2,   1,   1,   0, 254, 255,   0],
            vec![ 13,   2,   1,   1,   0, 256, 257,   0],
            vec![ 13,   3,   1,   1,   0, 258, 259,   0],
            vec![ 14,   0,   6,   1,   0, 220, 226,   0],
            vec![ 14,   0,   2,   1,   0, 232, 234,   0],
            vec![ 14,   0,   1,   1,   0, 236, 237,   0],
            vec![ 14,   0,   1,   1,   0, 238, 239,   0],
            vec![ 14,   0,   1,   1,   0, 240, 241,   0],
            vec![ 14,   1,   4,   1,   0, 242, 246,   0],
            vec![ 14,   1,   1,   1,   0, 250, 251,   0],
            vec![ 14,   1,   1,   1,   0, 252, 253,   0],
            vec![ 14,   2,   1,   1,   0, 254, 255,   0],
            vec![ 14,   2,   1,   1,   0, 256, 257,   0],
            vec![ 14,   3,   1,   1,   0, 258, 259,   0],
            vec![ 15,   0,   3,   1,   0, 208, 211,   0],
            vec![ 15,   0,   1,   1,   0, 214, 215,   0],
            vec![ 15,   0,   1,   1,   0, 216, 217,   0],
            vec![ 15,   1,   1,   1,   0, 218, 219,   0],
            vec![ 16,   0,   3,   1,   0, 208, 211,   0],
            vec![ 16,   0,   1,   1,   0, 214, 215,   0],
            vec![ 16,   0,   1,   1,   0, 216, 217,   0],
            vec![ 16,   1,   1,   1,   0, 218, 219,   0],
            vec![ 17,   0,   3,   1,   0, 208, 211,   0],
            vec![ 17,   0,   1,   1,   0, 214, 215,   0],
            vec![ 17,   0,   1,   1,   0, 216, 217,   0],
            vec![ 17,   1,   1,   1,   0, 218, 219,   0],
            vec![ 18,   0,   3,   1,   0, 208, 211,   0],
            vec![ 18,   0,   1,   1,   0, 214, 215,   0],
            vec![ 18,   0,   1,   1,   0, 216, 217,   0],
            vec![ 18,   1,   1,   1,   0, 218, 219,   0],
            vec![ 19,   0,   3,   1,   0, 208, 211,   0],
            vec![ 19,   0,   1,   1,   0, 214, 215,   0],
            vec![ 19,   0,   1,   1,   0, 216, 217,   0],
            vec![ 19,   1,   1,   1,   0, 218, 219,   0],
            vec![ 20,   0,   3,   1,   0, 208, 211,   0],
            vec![ 20,   0,   1,   1,   0, 214, 215,   0],
            vec![ 20,   0,   1,   1,   0, 216, 217,   0],
            vec![ 20,   1,   1,   1,   0, 218, 219,   0],
            vec![ 21,   0,   3,   1,   0, 208, 211,   0],
            vec![ 21,   0,   1,   1,   0, 214, 215,   0],
            vec![ 21,   0,   1,   1,   0, 216, 217,   0],
            vec![ 21,   1,   1,   1,   0, 218, 219,   0],
            vec![ 22,   0,   3,   1,   0, 208, 211,   0],
            vec![ 22,   0,   1,   1,   0, 214, 215,   0],
            vec![ 22,   0,   1,   1,   0, 216, 217,   0],
            vec![ 22,   1,   1,   1,   0, 218, 219,   0],
            vec![ 23,   0,   3,   1,   0, 208, 211,   0],
            vec![ 23,   0,   1,   1,   0, 214, 215,   0],
            vec![ 23,   0,   1,   1,   0, 216, 217,   0],
            vec![ 23,   1,   1,   1,   0, 218, 219,   0],
            vec![ 24,   0,   3,   1,   0, 208, 211,   0],
            vec![ 24,   0,   1,   1,   0, 214, 215,   0],
            vec![ 24,   0,   1,   1,   0, 216, 217,   0],
            vec![ 24,   1,   1,   1,   0, 218, 219,   0],
            vec![ 25,   0,   3,   1,   0, 208, 211,   0],
            vec![ 25,   0,   1,   1,   0, 214, 215,   0],
            vec![ 25,   0,   1,   1,   0, 216, 217,   0],
            vec![ 25,   1,   1,   1,   0, 218, 219,   0],
            vec![ 26,   0,   3,   1,   0, 208, 211,   0],
            vec![ 26,   0,   1,   1,   0, 214, 215,   0],
            vec![ 26,   0,   1,   1,   0, 216, 217,   0],
            vec![ 26,   1,   1,   1,   0, 218, 219,   0],
            vec![ 27,   0,   3,   1,   0, 208, 211,   0],
            vec![ 27,   0,   1,   1,   0, 214, 215,   0],
            vec![ 27,   0,   1,   1,   0, 216, 217,   0],
            vec![ 27,   1,   1,   1,   0, 218, 219,   0],
            vec![ 28,   0,   3,   1,   0, 208, 211,   0],
            vec![ 28,   0,   1,   1,   0, 214, 215,   0],
            vec![ 28,   0,   1,   1,   0, 216, 217,   0],
            vec![ 28,   1,   1,   1,   0, 218, 219,   0],
            vec![ 29,   0,   3,   1,   0, 208, 211,   0],
            vec![ 29,   0,   1,   1,   0, 214, 215,   0],
            vec![ 29,   0,   1,   1,   0, 216, 217,   0],
            vec![ 29,   1,   1,   1,   0, 218, 219,   0],
            vec![ 30,   0,   3,   1,   0, 208, 211,   0],
            vec![ 30,   0,   1,   1,   0, 214, 215,   0],
            vec![ 30,   0,   1,   1,   0, 216, 217,   0],
            vec![ 30,   1,   1,   1,   0, 218, 219,   0],
            vec![ 31,   0,   3,   1,   0, 208, 211,   0],
            vec![ 31,   0,   1,   1,   0, 214, 215,   0],
            vec![ 31,   0,   1,   1,   0, 216, 217,   0],
            vec![ 31,   1,   1,   1,   0, 218, 219,   0],
            vec![ 32,   0,   3,   1,   0, 208, 211,   0],
            vec![ 32,   0,   1,   1,   0, 214, 215,   0],
            vec![ 32,   0,   1,   1,   0, 216, 217,   0],
            vec![ 32,   1,   1,   1,   0, 218, 219,   0],
            vec![ 33,   0,   3,   1,   0, 208, 211,   0],
            vec![ 33,   0,   1,   1,   0, 214, 215,   0],
            vec![ 33,   0,   1,   1,   0, 216, 217,   0],
            vec![ 33,   1,   1,   1,   0, 218, 219,   0],
            vec![ 34,   0,   3,   1,   0, 208, 211,   0],
            vec![ 34,   0,   1,   1,   0, 214, 215,   0],
            vec![ 34,   0,   1,   1,   0, 216, 217,   0],
            vec![ 34,   1,   1,   1,   0, 218, 219,   0],
            vec![ 35,   0,   3,   1,   0, 208, 211,   0],
            vec![ 35,   0,   1,   1,   0, 214, 215,   0],
            vec![ 35,   0,   1,   1,   0, 216, 217,   0],
            vec![ 35,   1,   1,   1,   0, 218, 219,   0],
            vec![ 36,   0,   3,   1,   0, 208, 211,   0],
            vec![ 36,   0,   1,   1,   0, 214, 215,   0],
            vec![ 36,   0,   1,   1,   0, 216, 217,   0],
            vec![ 36,   1,   1,   1,   0, 218, 219,   0],
            vec![ 37,   0,   3,   1,   0, 208, 211,   0],
            vec![ 37,   0,   1,   1,   0, 214, 215,   0],
            vec![ 37,   0,   1,   1,   0, 216, 217,   0],
            vec![ 37,   1,   1,   1,   0, 218, 219,   0],
            vec![ 38,   0,   3,   1,   0, 208, 211,   0],
            vec![ 38,   0,   1,   1,   0, 214, 215,   0],
            vec![ 38,   0,   1,   1,   0, 216, 217,   0],
            vec![ 38,   1,   1,   1,   0, 218, 219,   0],
            vec![ 39,   0,   3,   1,   0, 208, 211,   0],
            vec![ 39,   0,   1,   1,   0, 214, 215,   0],
            vec![ 39,   0,   1,   1,   0, 216, 217,   0],
            vec![ 39,   1,   1,   1,   0, 218, 219,   0],
            vec![ 40,   0,   3,   1,   0, 208, 211,   0],
            vec![ 40,   0,   1,   1,   0, 214, 215,   0],
            vec![ 40,   0,   1,   1,   0, 216, 217,   0],
            vec![ 40,   1,   1,   1,   0, 218, 219,   0],
            vec![ 41,   0,   3,   1,   0, 208, 211,   0],
            vec![ 41,   0,   1,   1,   0, 214, 215,   0],
            vec![ 41,   0,   1,   1,   0, 216, 217,   0],
            vec![ 41,   1,   1,   1,   0, 218, 219,   0],
            vec![ 42,   0,   3,   1,   0, 208, 211,   0],
            vec![ 42,   0,   1,   1,   0, 214, 215,   0],
            vec![ 42,   0,   1,   1,   0, 216, 217,   0],
            vec![ 42,   1,   1,   1,   0, 218, 219,   0],
            vec![ 43,   0,   3,   1,   0, 208, 211,   0],
            vec![ 43,   0,   1,   1,   0, 214, 215,   0],
            vec![ 43,   0,   1,   1,   0, 216, 217,   0],
            vec![ 43,   1,   1,   1,   0, 218, 219,   0],
            vec![ 44,   0,   3,   1,   0, 208, 211,   0],
            vec![ 44,   0,   1,   1,   0, 214, 215,   0],
            vec![ 44,   0,   1,   1,   0, 216, 217,   0],
            vec![ 44,   1,   1,   1,   0, 218, 219,   0],
            vec![ 45,   0,   3,   1,   0, 208, 211,   0],
            vec![ 45,   0,   1,   1,   0, 214, 215,   0],
            vec![ 45,   0,   1,   1,   0, 216, 217,   0],
            vec![ 45,   1,   1,   1,   0, 218, 219,   0],
            vec![ 46,   0,   3,   1,   0, 208, 211,   0],
            vec![ 46,   0,   1,   1,   0, 214, 215,   0],
            vec![ 46,   0,   1,   1,   0, 216, 217,   0],
            vec![ 46,   1,   1,   1,   0, 218, 219,   0],
        ];
        let c_env = vec![
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            0.0000000000000000e+00,  0.0000000000000000e+00,
            1.6957457378784582e+00, -2.1353905207585197e-03,
            1.5839684376104349e-01,  0.0000000000000000e+00,
            4.5647846319768721e+00, -1.8387035192018054e-02,
            1.5869919994097390e-01,  0.0000000000000000e+00,
            5.5823076637489297e+00, -2.6309334024032163e+00,
            8.3261333048336628e-01,  0.0000000000000000e+00,
            8.4629494762521720e+00, -2.6548762324014556e+00,
            8.3009999473769469e-01,  0.0000000000000000e+00,
            9.4575501301332565e+00, -5.2738665656974204e+00,
            1.5080014474029195e+00,  0.0000000000000000e+00,
            1.2337417154925427e+01, -5.3040265946454790e+00,
            1.5103447077973799e+00,  0.0000000000000000e+00,
            1.3321567623337668e+01, -7.9233003868601282e+00,
            2.1866398932567241e+00,  0.0000000000000000e+00,
            1.6196804819124655e+01, -7.9499833197389869e+00,
            2.1974302294279910e+00,  0.0000000000000000e+00,
            1.7180709623140700e+01, -1.0567613050225264e+01,
            2.8701727297731527e+00,  0.0000000000000000e+00,
            2.0060935695896539e+01, -1.0596412476363637e+01,
            2.8742734354634587e+00,  0.0000000000000000e+00,
            2.1045558595839918e+01, -1.3215289426092127e+01,
            3.5505308264003119e+00,  0.0000000000000000e+00,
            2.3926748428919286e+01, -1.3248510811361982e+01,
            3.5579952445923442e+00,  0.0000000000000000e+00,
            2.4910294184971661e+01, -1.5871167213339602e+01,
            4.2357077246451116e+00,  0.0000000000000000e+00,
            2.7791843066014700e+01, -1.5924722051709775e+01,
            4.2486901431208741e+00,  0.0000000000000000e+00,
            2.8768018890181271e+01, -1.8537476288794675e+01,
            4.9231333969781446e+00,  0.0000000000000000e+00,
            9.8862911932745767e-01,  1.8800129322847974e+00,
           -3.2660136610857965e-01,  0.0000000000000000e+00,
            9.5499199431019965e-01, -5.1056620433498834e-01,
            2.0218368779334051e+00,  0.0000000000000000e+00,
            9.5081569957491086e-01, -1.3482440008321890e+00,
           -1.2245992205018970e+00,  0.0000000000000000e+00,
            5.2603172293842890e+00,  1.3806339066072342e+00,
            1.5190941397541162e+00,  0.0000000000000000e+00,
            5.2558196812078242e+00,  5.4628202808926807e-01,
           -1.7110903140099265e+00,  0.0000000000000000e+00,
            4.8753800178103859e+00, -4.0272142413218495e+00,
           -5.2687454078998486e-01,  0.0000000000000000e+00,
            4.8836948127584723e+00, -3.1913883764267221e+00,
            2.7017603375519146e+00,  0.0000000000000000e+00,
            9.1788911158048929e+00, -1.2642834691177633e+00,
            2.1907594962082761e+00,  0.0000000000000000e+00,
            9.1695558687495407e+00, -2.1037187109108095e+00,
           -1.0384800944934842e+00,  0.0000000000000000e+00,
            8.7459548606670374e+00, -6.6668214866368185e+00,
            1.4766319937351394e-01,  0.0000000000000000e+00,
            8.7525122103192778e+00, -5.8290492038333896e+00,
            3.3767705092465548e+00,  0.0000000000000000e+00,
            1.3050732075165003e+01, -3.9124133792545215e+00,
            2.8713443599703830e+00,  0.0000000000000000e+00,
            1.3044817232395113e+01, -4.7517730320025855e+00,
           -3.5823538143379874e-01,  0.0000000000000000e+00,
            1.2608744031890479e+01, -9.3119278349742736e+00,
            8.2609377535361672e-01,  0.0000000000000000e+00,
            1.2611597518338574e+01, -8.4760263810341634e+00,
            4.0561648455501862e+00,  0.0000000000000000e+00,
            1.6910308711976683e+01, -6.5645684060366030e+00,
            3.5604329912930330e+00,  0.0000000000000000e+00,
            1.6911574828480145e+01, -7.3930810308296628e+00,
            3.2816983879196865e-01,  0.0000000000000000e+00,
            1.6469114353674481e+01, -1.1961342758875736e+01,
            1.5063951801970390e+00,  0.0000000000000000e+00,
            1.6472572552482433e+01, -1.1125649174809327e+01,
            4.7366363257448185e+00,  0.0000000000000000e+00,
            2.0769979835094595e+01, -9.2074637748083159e+00,
            4.2362935397437278e+00,  0.0000000000000000e+00,
            2.0767995622663801e+01, -1.0042231393073687e+01,
            1.0080366066267408e+00,  0.0000000000000000e+00,
            2.0332735004392731e+01, -1.4603973565990009e+01,
            2.1859029000681440e+00,  0.0000000000000000e+00,
            2.0333868840067471e+01, -1.3769753968300762e+01,
            5.4165408881020820e+00,  0.0000000000000000e+00,
            2.4636831917485853e+01, -1.1858428274131922e+01,
            4.9216405133397387e+00,  0.0000000000000000e+00,
            2.4635943746207307e+01, -1.2693082508829818e+01,
            1.6912103951795021e+00,  0.0000000000000000e+00,
            2.4190459709602340e+01, -1.7256449846213265e+01,
            2.8713254627091374e+00,  0.0000000000000000e+00,
            2.4191574648015830e+01, -1.6421663330686652e+01,
            6.1005083616271607e+00,  0.0000000000000000e+00,
            2.8515872733380554e+01, -1.4546563686325722e+01,
            5.6152833846225905e+00,  0.0000000000000000e+00,
            2.8515097945669481e+01, -1.5380764386753725e+01,
            2.3851934171647753e+00,  0.0000000000000000e+00,
            2.8114211445604251e+01, -1.9105887009802601e+01,
            6.8019935963269580e+00,  0.0000000000000000e+00,
            3.0834982427969290e+01, -1.8551479159377703e+01,
            4.9261758560386939e+00,  0.0000000000000000e+00,
            2.8113172096235740e+01, -1.9944547463884575e+01,
            3.5553685252791989e+00,  0.0000000000000000e+00,
            3.4061340999999999e+01,  5.1235746000000004e+00,
            1.1646626000000000e+00,  9.0618446120248586e-01,
            1.6354784928239057e+00,  2.4145128304249659e+00,
            3.2723041000000003e-01,  1.0930883523645869e+00,
            1.0307241000000000e-01,  4.5959135109675275e-01,
            8.0000000000000004e-01,  2.2072263710762661e+00,
            1.3575349682000000e+04,  2.0352333679999999e+03,
            4.6322562359000000e+02,  1.3120019597999999e+02,
            4.2853015890999998e+01,  1.5584185765999999e+01,
            1.9269786369447457e+00,  3.5965017404150745e+00,
            6.1382671840596235e+00,  9.5394800177297636e+00,
            1.2777459273222963e+01,  1.3125218210409033e+01,
            6.2067138507999999e+00,  2.5764896526999999e+00,
            6.5167955479977069e+00,  1.9311152716735143e+00,
            5.7696339418999998e-01,  1.6725388683875464e+00,
            2.2972831358000001e-01,  8.3835105961496525e-01,
            9.5164440027999994e-02,  4.3288351417905013e-01,
            3.4697232243999999e+01,  7.9582622825999998e+00,
            2.3780826883000001e+00,  8.1433208183000005e-01,
            2.7827633154407163e+00,  2.9702240843169960e+00,
            2.6011391897611520e+00,  1.6425869687454335e+00,
            2.8887547253000001e-01,  6.1783531504681743e-01,
            1.0056823670999999e-01,  1.6521917035633993e-01,
            1.0970000000000000e+00,  3.0682517054988114e+00,
            3.1800000000000000e-01,  3.5137984426073676e-01,
            7.6100000000000001e-01,  1.0669052186285761e+00
        ];
        let mut cint_data = CINTR2CDATA::new();
        cint_data.initial_r2c(&c_atm, c_atm.len() as i32, &c_bas, c_bas.len() as i32, &c_env);
        return cint_data;
    }
}
